#+TITLE: Bartender's Friend - Project Planning & Architecture
#+DATE: 2025-08-03
#+STARTUP: overview
#+AUTHOR: Greg & Claude

* Project Vision
** Core Mission
Build a comprehensive cocktail database and discovery platform that:
- Aggregates recipes from multiple high-quality sources
- Provides intelligent search across ingredients, names, and categories  
- Enables users to rate, annotate, and contribute recipes
- Offers ingredient substitution suggestions
- Supports both casual browsing and serious cocktail craft

** Success Metrics
- 2000+ high-quality cocktail recipes from diverse sources
- Sub-second search response times
- User-friendly API for potential mobile apps
- Clean, maintainable codebase suitable for continuous enhancement

* Technical Architecture

** Current Tech Stack (Proven)
- *Database*: PostgreSQL (bartenders_friend database)
- *ETL Pipeline*: Python with pandas, SQLAlchemy, psycopg2
- *Backend*: FastAPI with Python (planned)
- *Authentication*: JWT with simple user/pass initially
- *Frontend*: Alpine.js for lightweight prototyping (planned)

** Data Strategy - Multi-Source Aggregation
*** Data Sources [3/5 Complete]
1. âœ… *boston_cocktails.csv* - 989 cocktails (normalized format)
2. âœ… *all_drinks.csv* - 546 cocktails (denormalized with instructions)
3. ðŸš§ *the-cocktail-db.csv* - 635 cocktails (with image URLs)
4. ðŸ“‹ *stevana-cocktails/*.yml* - 158 boutique cocktails (timing & taste data)
5. ðŸ“‹ *opendrinks/*.json* - 647 premium cocktails (descriptions & images)

*** Target: ~3000 Total Cocktails

** Database Schema Evolution
*** Stage 1: Relaxed Loading âœ…
- No foreign key constraints
- Text-based references
- Focus on data ingestion speed
- âœ… 1,535 cocktails loaded successfully

*** Stage 2: Quality & Expansion ðŸš§
- Load remaining data sources  
- Deduplication and normalization
- Unit standardization
- Quality analysis

*** Stage 3: Production Schema ðŸ“‹
- Add foreign key constraints
- Performance optimization
- Full referential integrity
- Production-ready structure

* Development Workflow

** ETL Process (Proven Approach)
1. *Sample data sources* with head/tail commands
2. *Design transformation logic* for each format
3. *Load into relaxed schema* without constraints
4. *Analyze and clean data* in-database
5. *Enforce relationships* when data is clean

** File Management Standards
- Keep only current script versions
- Clear naming conventions (stage1_enhanced vs stage1)
- Document execution sequence in README
- Version control all schema iterations

** Git Strategy
- Granular commits by functional area
- Conventional commit format (feat/fix/docs)
- Database, ETL, and docs as separate commits
- Clear commit messages with quantified progress

* API Development Plan

** Phase 1: Core CRUD ðŸ“‹
- Cocktail search and retrieval
- Ingredient-based search
- Basic user management
- JWT authentication

** Phase 2: Enhanced Features ðŸ“‹  
- Rating and review system
- Personal cocktail collections
- Ingredient substitution suggestions
- Image handling optimization

** Phase 3: Community Features ðŸ“‹
- User-contributed recipes
- Social features (follows, shares)
- Advanced search with ML suggestions
- Mobile API optimization

* Data Quality Standards

** Ingredient Management
- Standardized naming (e.g., "Light Rum" vs "White Rum")
- Category classification for substitutions
- Unit normalization (oz, ml, dashes)
- Alternative name handling

** Recipe Quality
- Required fields: name, instructions, ingredients
- Optional enrichment: images, timing, complexity
- Source attribution for all recipes
- Duplicate detection and merging strategy

** Search Optimization  
- Full-text search on names and instructions
- Ingredient-based filtering
- Category and glass-type faceting
- Performance indexes on common queries

* Constraints & Decisions

** Technology Choices
- *PostgreSQL*: Chosen for full-text search and JSON support
- *Alpine.js*: Lightweight, Vue-like syntax, minimal complexity
- *Local Development*: Cloud deployment deferred until proven locally
- *Image Storage*: Local storage initially, cloud migration option preserved

** Development Principles
- Backend-first development approach
- Data quality over speed of feature delivery  
- Simple solutions over complex architectures
- Documentation-driven development

** Future Considerations
- OAuth integration pathway planned
- Mobile app API compatibility
- Multi-language recipe support potential
- Advanced ML features (recommendation engine)