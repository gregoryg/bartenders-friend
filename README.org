#+TITLE: Bartender's Friend
#+AUTHOR: Gregory Grubbs + Claude
#+DATE: [2025-08-04 Mon]

* Introduction

Welcome to Bartender's Friend - a comprehensive cocktail database and recipe management system!

This project provides a robust backend for cocktail enthusiasts featuring:
- *1,535 cocktails* from curated sources
- *904 unique ingredients* with relationships
- Recipe instructions and preparation details
- Ingredient substitution capabilities (planned)
- User ratings and personal collections (planned)

* Quick Start

** Prerequisites
- PostgreSQL server running locally
- Python 3.11+ with virtual environment support
- Basic familiarity with command line tools

** Setup Instructions

#+BEGIN_SRC bash
# Clone and navigate to project
git clone <repository-url>
cd bartenders-friend

# Create and activate Python virtual environment
python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate

# Install Python dependencies
pip install -r requirements.txt

# Create PostgreSQL database
createdb bartenders_friend  # Or use your preferred method

# Create database schema (Stage 1: relaxed constraints)
psql -h localhost -d bartenders_friend -f create-db-stage1.sql

# Load initial data
python etl_stage1_enhanced.py  # Loads CSV data sources

# Verify data loaded successfully
psql -h localhost -d bartenders_friend -c "SELECT COUNT(*) FROM cocktails;"

# Note: etl_stage1.py has been deprecated and moved to .bak
#+END_SRC

* Project Structure

#+BEGIN_EXAMPLE
bartenders-friend/
├── raw-data/                  # Source cocktail datasets
│   ├── boston_cocktails.csv   # Normalized cocktail data
│   ├── all_drinks.csv         # Denormalized with instructions
│   └── ...                    # Additional data sources
├── venv/                      # Python virtual environment
├── create-db-stage1.sql       # Relaxed database schema
├── etl_stage1.py             # Initial data loading script
├── requirements.txt          # Python dependencies
├── TASKS.org                 # Current tasks and backlog
├── PLANNING.org              # Architecture and strategy docs
└── README.org                # This file
#+END_EXAMPLE

* Current Database Status

*Data Successfully Loaded (2025-08-03):*
- *Cocktails*: 1,535 recipes from multiple sources
- *Ingredients*: 904 unique ingredients normalized
- *Relationships*: 3,972 cocktail-ingredient pairings
- *Instructions*: 545 cocktails with preparation steps
- *Glass Types*: 13 distinct types (Highball, Martini, etc.)

*Schema Approach*:
1. *Stage 1* ✅: Relaxed schema for flexible data loading
2. *Stage 2* (next): Data cleanup and deduplication
3. *Stage 3* (planned): Add foreign key constraints

* Data Sources Integrated

** Primary Sources
- *Boston Cocktails*: Classic cocktail collection (990 recipes)
- *All Drinks CSV*: Community-sourced with instructions (545 recipes)
- *Glass Types*: Extracted and normalized from recipe data

** Schema Design
The database follows a normalized approach with cross-reference tables:
- =cocktails= - Recipe names, categories, instructions
- =ingredients= - Unique ingredient catalog
- =cocktail_ingredients= - Many-to-many relationships with quantities
- =glass_type= - Standardized glassware types
- =users=, =ratings= - User management (ready for implementation)

* Development Workflow

*ETL Strategy*:
Proven "Relaxed Schema → Cleanup → Constraints" approach allows:
- Loading diverse data formats without constraint failures
- Data quality analysis before normalization
- Incremental schema refinement

*Tech Stack*:
- *Database*: PostgreSQL with optimized schema design
- *ETL*: Python with pandas, SQLAlchemy, psycopg2
- *Backend* (planned): FastAPI with Pydantic validation
- *Frontend* (planned): Alpine.js for lightweight interactions

* Next Steps

** Immediate (Stage 2 ETL)
1. Run enhanced ETL for remaining ingredient relationships
2. Data quality analysis and deduplication
3. Unit standardization (oz, ml, dashes, etc.)
4. Create final schema with foreign key constraints

** API Development
1. FastAPI backend with CRUD operations
2. Search endpoints (ingredients, names, categories)
3. User authentication with JWT tokens
4. Rating and review system

** Frontend Development
1. Alpine.js prototype for recipe browsing
2. Ingredient-based search interface
3. User dashboard for personal collections

* Contributing

This project uses a documented, test-driven approach:
- All major changes tracked in =TASKS.org=
- Architecture decisions documented in =PLANNING.org=
- ETL scripts include clear logging and error handling

Pull requests welcome! Focus areas:
- Additional data source integrations
- Search algorithm improvements
- Frontend user experience enhancements

* Database Queries

** Useful Commands
#+BEGIN_SRC sql
-- View all tables and row counts
SELECT relname AS table_name, n_live_tup AS row_count
FROM pg_stat_user_tables ORDER BY table_name;

-- Find cocktails with specific ingredients
SELECT DISTINCT c.name
FROM cocktails c
JOIN cocktail_ingredients ci ON c.name = ci.cocktail_name
WHERE ci.ingredient_name = 'Gin';

-- Popular glass types
SELECT glass_type, COUNT(*)
FROM cocktails
GROUP BY glass_type
ORDER BY COUNT(*) DESC;
#+END_SRC

* License

See =LICENSE= file for details.
